{"version":3,"sources":["lib/components/PerseidsHeader/perseids-logo-transparent.png","lib/components/PerseidsFooter/twitter.svg","lib/components/PerseidsHeader/PerseidsHeader.js","lib/components/PerseidsHeader/index.js","lib/components/PerseidsFooter/PerseidsFooter.js","lib/components/PerseidsFooter/index.js","demo/App.js","demo/registerServiceWorker.js","demo/index.js"],"names":["module","exports","__webpack_require__","p","PerseidsHeader","_ref","children","react_default","a","createElement","className","href","src","perseidsLogoTransparent","title","alt","defaultProps","undefined","renderOcticon","img","target","rel","PerseidsFooter","text","copyright","github","report","twitter","reportIcon","githubIcon","twitterIcon","App","components_PerseidsHeader","components_PerseidsFooter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","demo_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f9fbd42e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/perseids-logo-transparent.5ea8de1b.png\";","module.exports = __webpack_public_path__ + \"static/media/twitter.2ac2d65c.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PerseidsHeader.css';\n\nimport perseidsLogoTransparent from './perseids-logo-transparent.png';\n\nconst PerseidsHeader = ({ children }) => (\n  <header className=\"navbar navbar-expand-md navbar-light bg-light perseids-react-components--navbar\">\n    <a className=\"navbar-brand perseids-react-components--navbar-brand\" href=\"https://www.perseids.org\">\n      <img className=\"perseids-react-components--navbar-logo-img\" src={perseidsLogoTransparent} title=\"perseids logo\" alt=\"perseids logo\" />\n    </a>\n    {children}\n  </header>\n);\n\nPerseidsHeader.defaultProps = {\n  children: undefined,\n};\n\nPerseidsHeader.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default PerseidsHeader;\n","import PerseidsHeader from './PerseidsHeader';\n\nexport default PerseidsHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PerseidsFooter.css';\n\nimport githubIcon from 'octicons/build/svg/mark-github.svg';\nimport reportIcon from 'octicons/build/svg/report.svg';\nimport twitterIcon from './twitter.svg';\n\nconst renderCopyright = text => (\n  <span className=\"navbar-text\">\n    {text}\n  </span>\n);\n\nconst renderOcticon = (href, img, title, alt) => (\n  <li className=\"nav-item\">\n    <a className=\"nav-link p-2\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img className=\"perseids-react-components--octicon\" src={img} title={title} alt={alt} />\n    </a>\n  </li>\n);\n\nconst renderTwitter = href => (\n  <li className=\"nav-item\">\n    <a className=\"nav-link p-2\" href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img className=\"perseids-react-components--twitter\" src={twitterIcon} title=\"Twitter\" alt=\"Twitter Icon\" />\n    </a>\n  </li>\n);\n\nconst PerseidsFooter = ({\n  children,\n  copyright,\n  github,\n  report,\n  twitter,\n}) => (\n  <footer className=\"footer perseids-react-components--footer\">\n    <nav className=\"navbar navbar-light bg-light py-0 perseids-react-components--footer-nav\">\n      {!!copyright && renderCopyright(copyright)}\n\n      {children}\n\n      <ul className=\"navbar-nav my-2 my-lg-02 flex-row\">\n        {!!report && renderOcticon(report, reportIcon, 'Report Issue', 'Report Icon')}\n        {!!github && renderOcticon(github, githubIcon, 'View Source on Github', 'GitHub Icon')}\n        {!!twitter && renderTwitter(twitter)}\n      </ul>\n    </nav>\n  </footer>\n);\n\nPerseidsFooter.defaultProps = {\n  children: undefined,\n  copyright: '© The Perseids Project 2019',\n  github: 'https://github.com/perseids-project',\n  report: '',\n  twitter: 'https://twitter.com/PerseidsProject',\n};\n\nPerseidsFooter.propTypes = {\n  children: PropTypes.node,\n  copyright: PropTypes.string,\n  github: PropTypes.string,\n  report: PropTypes.string,\n  twitter: PropTypes.string,\n};\n\nexport default PerseidsFooter;\n","import PerseidsFooter from './PerseidsFooter';\n\nexport default PerseidsFooter;\n","import React from 'react';\n\nimport { PerseidsHeader, PerseidsFooter } from '../lib';\n\nconst App = () => (\n  <div>\n    <PerseidsHeader>\n      Header\n    </PerseidsHeader>\n    <div className=\"jumbotron bg-white\">\n      <div className=\"container bg-white\">\n        <h1 className=\"display-3 text-center\">\n          Body\n        </h1>\n      </div>\n    </div>\n    <PerseidsFooter\n      copyright=\"© The Example Project 2018\"\n      github=\"https://github.com/perseids-tools/perseids-react-components\"\n      report=\"https://github.com/perseids-tools/perseids-react-components/issues\"\n      twitter=\"\"\n    />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}