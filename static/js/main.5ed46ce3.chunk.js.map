{"version":3,"sources":["lib/components/PerseidsHeader/perseids-logo-transparent.png","lib/components/PerseidsHeader/PerseidsHeader.js","lib/components/PerseidsHeader/index.js","lib/components/PerseidsFooter/twitter.svg","lib/components/PerseidsFooter/doi.svg","lib/components/PerseidsFooter/PerseidsFooter.js","lib/components/PerseidsFooter/index.js","demo/App.js","demo/registerServiceWorker.js","demo/index.js"],"names":["PerseidsHeader","children","component","Component","logo","props","className","src","title","alt","defaultProps","undefined","perseidsLogoTransparent","href","iconClass","hasFollower","renderOcticon","img","target","rel","PerseidsFooter","copyright","doi","report","github","twitter","text","doiIcon","reportIcon","githubIcon","twitterIcon","renderTwitter","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gNAAe,G,MAAA,IAA0B,uDCazC,MAAMA,EAAiB,EACrBC,WACAC,UAAWC,EACXC,OACAC,WAEA,4BAAQC,UAAU,mFAChB,kBAACH,EAAD,eAAWG,UAAU,wDAA2DD,GAC7ED,GAAQ,yBAAKE,UAAU,6CAA6CC,IAAKH,EAAMI,MAAM,gBAAgBC,IAAI,mBAE3GR,GAILD,EAAeU,aAAe,CAC5BT,cAAUU,EACVT,UAAW,IACXE,KAAMQ,EACNP,MAAO,CAAEQ,KAAM,6BAWFb,ICxCAA,EDwCAA,E,sBE1CA,MAA0B,oCCA1B,MAA0B,gCCUzC,MAMMc,EAAaC,GAAD,qCACcA,EAAc,eAAiB,QAWzDC,EAAgB,CAACH,EAAMI,EAAKT,EAAOC,EAAKM,IAC5C,wBAAIT,UAAU,YACZ,uBAAGA,UAAWQ,EAAUC,GAAcF,KAAMA,EAAMK,OAAO,SAASC,IAAI,uBACpE,yBAAKb,UAAU,qCAAqCC,IAAKU,EAAKT,MAAOA,EAAOC,IAAKA,MAajFW,EAAiB,EACrBnB,WACAoB,YACAC,MACAC,SACAC,SACAC,cAEA,mCAAQnB,UAAU,4CAChB,yBAAKA,UAAU,6EACVe,IA5CgBK,EA4CaL,EA3CpC,0BAAMf,UAAU,eACboB,IA4CEzB,EAED,wBAAIK,UAAU,uCACTgB,IAvCQT,EAuCSS,EAvCHP,EAuCQQ,GAAUC,GAAUC,EAtCnD,wBAAInB,UAAU,YACZ,uBAAGA,UAAWQ,EAAUC,GAAcF,KAAMA,EAAMK,OAAO,SAASC,IAAI,uBACpE,yBAAKb,UAAU,iCAAiCC,IAAKoB,EAASnB,MAAM,4BAA4BC,IAAI,kBAqC/Fc,GAAUP,EAAcO,EAAQK,IAAY,eAAgB,cAAeJ,GAAUC,KACrFD,GAAUR,EAAcQ,EAAQK,IAAY,wBAAyB,cAAeJ,KACpFA,GA1BW,EAACZ,EAAME,IAC3B,wBAAIT,UAAU,YACZ,uBAAGA,UAAWQ,EAAUC,GAAcF,KAAMA,EAAMK,OAAO,SAASC,IAAI,uBACpE,yBAAKb,UAAU,qCAAqCC,IAAKuB,EAAatB,MAAM,UAAUC,IAAI,mBAuB1EsB,CAAcN,GAAS,MA1C3B,IAACZ,EAAME,EAVAW,GA0DzBN,EAAeV,aAAe,CAC5BT,cAAUU,EACVU,UAAW,uBACXC,IAAK,GACLC,OAAQ,GACRC,OAAQ,sCACRC,QAAS,uCAYIL,ICpFAA,EDoFAA,EE7DAY,MArBH,IACV,6BACE,kBAAC,EAAD,eAGA,yBAAK1B,UAAU,sBACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,yBAAd,UAKJ,kBAAC,EAAD,CACEe,UAAU,uBACVG,OAAO,8DACPD,OAAO,qEACPE,QAAQ,MCVd,MAAMQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAMC,IACLH,QAAQG,MAAM,4CAA6CA,K,MC/DjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,6BAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,KAC9B,MAAMvB,EAAK,UAAMqB,6BAAN,sBAEP5B,EAwCV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAKqB,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAKC,IACjCA,EAAa0B,aAAa3B,KAAK,KAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBc,MAAM,KACLF,QAAQC,IACN,mEA5DAoB,CAAwBjC,GAGxBD,EAAgBC,MC/BxBkC,K","file":"static/js/main.5ed46ce3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/perseids-logo-transparent.9e212369.png\";","import React from 'react';\nimport {\n  func,\n  node,\n  object,\n  oneOfType,\n  string,\n} from 'prop-types';\n\nimport './PerseidsHeader.css';\n\nimport perseidsLogoTransparent from './perseids-logo-transparent.png';\n\nconst PerseidsHeader = ({\n  children,\n  component: Component,\n  logo,\n  props,\n}) => (\n  <header className=\"navbar navbar-expand-md navbar-light bg-light perseids-react-components--navbar\">\n    <Component className=\"navbar-brand perseids-react-components--navbar-brand\" {...props}>\n      {logo && <img className=\"perseids-react-components--navbar-logo-img\" src={logo} title=\"perseids logo\" alt=\"perseids logo\" />}\n    </Component>\n    {children}\n  </header>\n);\n\nPerseidsHeader.defaultProps = {\n  children: undefined,\n  component: 'a',\n  logo: perseidsLogoTransparent,\n  props: { href: 'https://www.perseids.org' },\n};\n\nPerseidsHeader.propTypes = {\n  children: node,\n  component: oneOfType([string, func]),\n  logo: string,\n  // eslint-disable-next-line react/forbid-prop-types\n  props: object,\n};\n\nexport default PerseidsHeader;\n","import PerseidsHeader from './PerseidsHeader';\n\nexport default PerseidsHeader;\n","export default __webpack_public_path__ + \"static/media/twitter.b7fcab8a.svg\";","export default __webpack_public_path__ + \"static/media/doi.6fdc659c.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PerseidsFooter.css';\n\nimport githubIcon from '@primer/octicons/build/svg/mark-github.svg';\nimport reportIcon from '@primer/octicons/build/svg/report.svg';\nimport twitterIcon from './twitter.svg';\nimport doiIcon from './doi.svg';\n\nconst renderCopyright = (text) => (\n  <span className=\"navbar-text\">\n    {text}\n  </span>\n);\n\nconst iconClass = (hasFollower) => (\n  `nav-link py-2 pl-1 pl-sm-2 ${hasFollower ? 'pr-1 pr-sm-2' : 'pr-0'}`\n);\n\nconst renderDoi = (href, hasFollower) => (\n  <li className=\"nav-item\">\n    <a className={iconClass(hasFollower)} href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img className=\"perseids-react-components--doi\" src={doiIcon} title=\"Digital Object Identifier\" alt=\"DOI Icon\" />\n    </a>\n  </li>\n);\n\nconst renderOcticon = (href, img, title, alt, hasFollower) => (\n  <li className=\"nav-item\">\n    <a className={iconClass(hasFollower)} href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img className=\"perseids-react-components--octicon\" src={img} title={title} alt={alt} />\n    </a>\n  </li>\n);\n\nconst renderTwitter = (href, hasFollower) => (\n  <li className=\"nav-item\">\n    <a className={iconClass(hasFollower)} href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n      <img className=\"perseids-react-components--twitter\" src={twitterIcon} title=\"Twitter\" alt=\"Twitter Icon\" />\n    </a>\n  </li>\n);\n\nconst PerseidsFooter = ({\n  children,\n  copyright,\n  doi,\n  report,\n  github,\n  twitter,\n}) => (\n  <footer className=\"footer perseids-react-components--footer\">\n    <nav className=\"navbar navbar-light bg-light py-0 perseids-react-components--footer-nav\">\n      {!!copyright && renderCopyright(copyright)}\n\n      {children}\n\n      <ul className=\"navbar-nav my-2 my-lg-02 flex-row\">\n        {!!doi && renderDoi(doi, report || github || twitter)}\n        {!!report && renderOcticon(report, reportIcon, 'Report Issue', 'Report Icon', github || twitter)}\n        {!!github && renderOcticon(github, githubIcon, 'View Source on Github', 'GitHub Icon', twitter)}\n        {!!twitter && renderTwitter(twitter, false)}\n      </ul>\n    </nav>\n  </footer>\n);\n\nPerseidsFooter.defaultProps = {\n  children: undefined,\n  copyright: 'The Perseids Project',\n  doi: '',\n  report: '',\n  github: 'https://github.com/perseids-project',\n  twitter: 'https://twitter.com/PerseidsProject',\n};\n\nPerseidsFooter.propTypes = {\n  children: PropTypes.node,\n  copyright: PropTypes.string,\n  doi: PropTypes.string,\n  report: PropTypes.string,\n  github: PropTypes.string,\n  twitter: PropTypes.string,\n};\n\nexport default PerseidsFooter;\n","import PerseidsFooter from './PerseidsFooter';\n\nexport default PerseidsFooter;\n","import React from 'react';\n\nimport { PerseidsHeader, PerseidsFooter } from '../lib';\n\nconst App = () => (\n  <div>\n    <PerseidsHeader>\n      Header\n    </PerseidsHeader>\n    <div className=\"jumbotron bg-white\">\n      <div className=\"container bg-white\">\n        <h1 className=\"display-3 text-center\">\n          Body\n        </h1>\n      </div>\n    </div>\n    <PerseidsFooter\n      copyright=\"Â© Example Project\"\n      github=\"https://github.com/perseids-tools/perseids-react-components\"\n      report=\"https://github.com/perseids-tools/perseids-react-components/issues\"\n      twitter=\"\"\n    />\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}